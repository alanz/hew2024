#+Title: ghc-exactprint (HEW 2024)
#+Author: Alan Zimmerman
#+Email: @alanz@social.coop

#+REVEAL_TITLE_SLIDE:
# #+REVEAL_SLIDE_FOOTER: Haskell Ecosystem Workshop, ZuriHac 2024

#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5
#+OPTIONS: num:nil
#+OPTIONS: reveal_slide_number:c/t
# #+OPTIONS: toc:1
#+OPTIONS: toc:0

# 50 mins x 60 secs is 3000
#+OPTIONS: reveal_totaltime:3000

#+OPTIONS: reveal_center:nil
# #+REVEAL_THEME: simple
# #+REVEAL_THEME: white-contrast
#+REVEAL_THEME: white_contrast_compact_verbatim_headers
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
# #+REVEAL_PLUGINS: (markdown notes )
# #+REVEAL_PLUGINS: (markdown notes highlight toc-pogress)
# #+REVEAL_PLUGINS: (markdown notes highlight zoom)
#+REVEAL_PLUGINS: (markdown notes zoom)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/toc-progress/toc-progress.css
# #+REVEAL_HIGHLIGHT_CSS: %r/plugin/highlight/github.css
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args    :exports code


#+ATTR_REVEAL: :reveal_slide_global_footer 'footer hello'

# ####################################################
# For TOC-progress, need in Reveal.initialize({
#
# // Optional libraries used to extend reveal.js
# dependencies: [
#     ..
#     { src: './reveal.js/plugin/toc-progress/toc-progress.js'
#       , async: true
#       , callback: function() { toc_progress.initialize(); toc_progress.create(); }
#     }
# ]
# });
# ####################################################

* ghc-exactprint

Alan Zimmerman

[[https://social.coop/@alanz][~@alanz@social.coop~]]

Haskell Ecosystem Workshop,
ZuriHac, 2024-06-07

* About Me
:PROPERTIES:
:reveal_extra_attr: data-timing="120"
:END:
- Learned Haskell in 2012
- Decided to resurrect HaRe, using GHC backend
- First GHC commit Sep 2014
- Led to haskell-ide-engine, to expose it to users

#+begin_notes
- Started with projecteuler. Got to 120 or so
- First HaRe commit Sep 2012
- First commit was to start removing "landmines" from the AST.
  - First API Annotations commit Nov 2014
- HIE: Pre-LSP. I had seen omnisharp, its precursor
#+end_notes

* This Talk
- What is the problem being solved
- What it means inside GHC
- How it is used outside GHC

#+begin_notes
- This is a large topic, I can only cover osme of it. chat to me at ZuriHac
- First a Hand-wavy attempt to motivate the problem being solved
- Then how we capture the information needed inside GHC, aimed at
  GHC developers
- Finally how to use it in the real world, aimed at ghc-exactprint
  users
#+end_notes

* Problem Being Solved
To allow a tool to
- start from a src_haskell{GHC ParsedSource},
- make changes to it,
- print source reflecting the changes.

#+begin_notes
- And only the changes
#+end_notes

** Start from GHC ParsedSource
- It must accurately reflect the input source
    - Literals
    - ‘Trivia’
    - Spacing

#+begin_notes
- To be able to print everything, we need to capture everything
- In broad terms the information is Literals, Trivia, which is things like keywords, commas,
  semicolons, brackets of all kinds
- And of course Spacing.
- Let us look at each of these in turn
#+end_notes

** Literals
#+ATTR_REVEAL: :frag appear
#+begin_src haskell
1, 0x01, 001, 0_01
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
{-# Language CPP #-}
{-# LANGUAGE CPP #-}
#+end_src

#+begin_notes
- Take parsing a simple integer constant, value 1.
- <NEXT>
  - These are some of the ways it can be written.
- Or a pragma.
- <NEXT>
- So we have to keep the as-written text for all of these.
#+end_notes

** Trivia

#+begin_src haskell
let
   -- a comment
   fa :: Int
   fa = 1
in fa
#+end_src

#+begin_notes
- Trivia is everything that does not make it into the AST
- Here is a fragment of code for a let expression.
- Trivia is `let`, comment, `::`, `=`, `in`
#+end_notes

** Spacing

#+begin_notes
- Like time stops everything happening all at once, space stops it all
  from being in the same place
- On the face of it it seems simple
- To reproduce the original code, we just use the SrcSpan locations
- But when you want to change things it gets complicated
  - Add or delete lines
  - Move a block of code from one place to another
 <NEXT>
#+end_notes

*** Principle for Spacing
A located AST element is treated as a self-contained unit
#+ATTR_REVEAL: :frag (appear appear)
- From the inside
  - It is located, so it has a span
  - Everything we need to print it is inside the located element
  - Nothing is printed outside its span
- From the outside
  - We trust its span start point
  - We trust its span end point

#+begin_notes
- So we have a principle for spacing
- We apply this principle to be able to change and print an ast.
- <READ SLIDE>
- <NEXT>
- when we are inside the fragment, we have everything we need to be
  able to print it.
- we can print it based only on what is inside
- <NEXT>
- I will explain what this trust means shortly
#+end_notes

*** Spacing : printing
- A self-contained AST element has absolute locations
- When we print, we have a print head that we advance
- By distances calculated from the absolute locations
#+begin_notes
But first, lets look at printing an unchanged ast
- <READ SLIDE>
- We don't print at an absolute location. We move to a place, and then
  print.
- So, we track two locations
  - The output print position, which always advances as we print
  - The offset calculation position, which we reset every time we
    enter or exit a span
    - (remember “we trust the start and end positions of a span”)
  - Otherwise it also advances as we print
- For an unmodified AST these are always perfectly in sync
#+end_notes

*** Spacing example
[[./images-work/let-in-boxes-raw.png]]
#+begin_notes
Here is our let expression again
#+end_notes

*** Spacing example: top box
[[./images-work/let-in-boxes-top.png]]

#+begin_notes
At the top level, it is wrapped in a SrcSpan, setting its start and end position
#+end_notes
*** Spacing example: interior boxes
[[./images-work/let-in-boxes-middle.png]]
#+begin_notes
- If we go into the box, we find 4 more
- Two are trivia, two are more boxes we could go into
#+end_notes
*** Spacing example: spacing
[[./images-work/let-in-boxes-spacing.png]]
#+begin_notes
- We use distance from the end of one span to the start of the next to
  work out how much space to emit when printing
- And we trust the start and end span locations, in the sense that we
  use them for these calculations
#+end_notes
*** Spacing size changes example
[[./images-work/let-in-longer-boxes-raw.png]]
#+begin_notes
- Say we want to rename `fa` to `falonger`, and just update the
  literal text in the AST
  - (for each appropriate `HsVar`)
- But we make no other changes
#+end_notes

*** Spacing size changes example: spacing
[[./images-work/let-in-longer-boxes-spacing.png]]
#+begin_notes
- It's hard to draw this, but imagine the blue boxes are the same ones
  from before, not changed for the longer insides
- The spacing calculation to the start point is unchanged, so all is
  good
- When we finish, we set the offset calculation position to the end of the span
  (We trust the end position, and have an independent output head)
- And so following spacing calculations are unaffected.
#+end_notes

*** Spacing : size changes 2

- The same principle holds for bigger changes.
- If we change content inside a span, it does not matter,
- The “contract” with the surroundings is
  - the start of the span for entry spacing
  - and the end of the span for exit spacing

*** Spacing : the missing piece
#+ATTR_REVEAL: :frag (appear appear)
- How do we change things?
- Deltas : Directly provide the spacing

#+begin_notes
There is one remaining problem
- <NEXT>
- How do we change things?
  - If we delete a piece, there will be a gap
  - If we add something, there will be some kind of jump
  <NEXT>
- Deltas
  - when we print we have an output head, and all we
    need to know is how far to move before printing again.
  - At the point where we change from one self contained point
    to a changed one, we supply the delta directly
  - Instead of calculating it from the offset calculation position.
  - And then set the offset calculation position according to the next
    actual span we see
  - We trust the start position in a span
  - It will come after a delta, so the spacing is known
#+end_notes

*** Spacing : deltas

#+begin_src haskell
data DeltaPos
  = SameLine { deltaColumn :: Int }
  | DifferentLine { deltaLine :: Int, deltaColumn :: Int }
#+end_src

#+begin_notes
- The red arrows we saw before map onto a `DeltaPos`, which can have
  line/col
- Haskell is a layout-sensitive language
- Our print offset position also tracks the current indentation level, so
  the src_haskell{deltaColumn} is added to that.
#+end_notes

** Ordering things

- src_haskell{ParsedSource} is not a completely accurate reflection of the original source.
- src_haskell{ValBinds} separates out src_haskell{[Sig]}  and src_haskell{[Bind]}
- src_haskell{ClassDecl} and src_haskell{ClsInstDecl} separate out src_haskell{Bind}s,
  src_haskell{Sig}s, Type family instances etc
- For all of these, the original source can have them in any order.

#+begin_notes
Our next problem is how to order things
#+end_notes

*** Ordering things 2

- For an unmodified AST there is no problem, you just sort by start of
  span.
- But a modified one may have rearranged the existing ones, or brought
  in ones from elsewhere.
- And may have adjusted the spacing with explicit deltas.

#+begin_notes
- There are some more wrinkles.
- <READ SLIDE>
- And so just sorting is not an option for printing a changed AST
#+end_notes

*** Ordering things 3
[[./images-work/ordering-smaller.png]]
#+ATTR_REVEAL: :frag t
[[./images-work/ordering-sortkey-smaller.png]]

#+begin_notes
- Here is an example, of valbinds with two sigs and two binds
- Each specific list is physically ordered, so for src_haskell{ValBinds} we know
  the order of the sigs, and of the binds.
- But we don’t know the interleaving if we cant use src_haskell{SrcSpan}s
- <NEXT>
- If so, in addition to the lists of binds and sigs we store a list of
  tags
- We print according to these, driving a merge
  - so we draw first from the signatures, then the binds, and same
    again.
#+end_notes

** Comments
- Comments are the ultimate “trivia”. They have no influence on
  overall spacing and layout, but need to be preserved precisely.
- They can also occur absolutely anywhere in the source file.
- So we keep them in the "~SrcSpan~ on steroids" we wrap
  everything in, and fit them in when we print, if they fit into the
  current gap.

#+begin_notes
- <READ SLIDE>
- It’s more complicated than that, but we don't have time to look into
  the full detail today
#+end_notes

** Trailing Items
[[./images-work/do-trailing-boxes.png]]

#+begin_notes
- The final item in this section
- The image shows a trailing semi, with a red link to the preceding declaration
- The ast can be seen as an assembly of nested, ordered, self-contained boxes.
- The self-contained principle says that everything fits inside the
  AST Element span.
- So trailing items cannot be in the span, but are associated with it.
- If you consider a list of items, each item is a standalone entity
- The semis exist as part of the surrounding structure.
- So if you move the item elsewhere, or replace it with something
  else, the trailing semi should be managed as part of that location.
- Other trailing items are commas in tuples, vertical bars in data
  definitions, single and double arrows in type signatures
- We will see how this loose attachment is managed later
#+end_notes

** End of Hand Wavy Part

#+ATTR_REVEAL: :frag appear
Questions?

#+begin_notes
- Hopefully you now have a high level understanding of what the exact
  print annotations are for
- Next we can look into some details of how things are captured in GHC
- But first, any questions?
- <NEXT>
#+end_notes

* What it means inside GHC
- Located things
- Internal Annotations

#+begin_notes
- Time to dive into the detail.
- There are two main divisions
- Located things
- Internal things
- the AST consists of a nested interleaving of located things, so
  pretty much every ast element has a location and the thing itself
#+end_notes

** Terminology
- AST means src_haskell{ParsedSource}

#+begin_src haskell
type ParsedSource = Located (HsModule GhcPs)
#+end_src

For now we accept src_haskell{GhcPs} as simply a marker of the AST from the
parsing phase.

#+begin_notes
But first some terminology
#+end_notes

** Located Things

#+begin_notes
- As I said, the AST is layered, as we saw in the boxes diagrams
  earlier.
- The types around location are a bit complex, being driven mainly by
  type families.
- My mental model is that a type family is a function from types to types.
- Lets start with the first one
  <NEXT>
#+end_notes

*** Location

#+begin_src haskell
type family XRec p a = r | r -> a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type family Anno a = b
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance XRec (GhcPass p) a = GenLocated (Anno a) a
type GhcPs   = GhcPass 'Parsed
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type LHsExpr p = XRec p (HsExpr p)
type instance Anno (HsExpr (GhcPass p)) = SrcSpanAnnA
type SrcSpanAnnA = EpAnn AnnListItem
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type LHsExpr GhcPs = GenLocated (EpAnn AnnListItem) (HsExpr GhcPs)
#+end_src

#+begin_notes
- XRec has a parameter p, and maps a type 'a' to a type 'r', and fundeps say the reverse holds too.
- `p` is a parameter that is chased through the entire AST, and for `ParsedSource` is always `GhcPs`
- <NEXT>
- Anno is a type function from `a` to `b`
- <NEXT>
- We create an instance (= mapping) of XRec for all GhcPass types for
  src_haskell{a} as being located by src_haskell{Anno a}
- In our case we use src_haskell{GhcPass Parsed}, as src_haskell{GhcPs}
- Lets make this concrete
- <NEXT>
- LHsExpr is defined as an XRec type
- And it's Anno instance is SrcSpanAnnA
- which in turn is this EpAnn AnnListItem
- <NEXT>
- So in effect, we have ...
#+end_notes

*** EpAnn

#+begin_src haskell
data EpAnn ann = EpAnn
         { entry    :: !Anchor -- basically SrcSpan when parsed
         , anns     :: !ann
         , comments :: !EpAnnComments
         }
type Anchor = EpaLocation
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type EpaLocation = EpaLocation' [LEpaComment]
data EpaLocation' a = EpaSpan !SrcSpan
                    | EpaDelta !DeltaPos !a
#+end_src

#+begin_notes
- We are nearly at the bottom
- src_haskell{EpAnn} is basically an augmented src_haskell{SrcSpan}
- since the src_haskell{entry} field carries a src_haskell{SrcSpan} when parsed
- `ann` is the parameterised type,  src_haskell{AnnListItem} in our example
- `comments` captures any comments included in the immediate
  descendents of the thing being located by this, between the sub
  boxes in the first section.
- <NEXT>
- As I said, the as-parsed EpaLocation is EpaSpan, holding a SrcSpan
- EpaDelta is used for editing and reprinting, we will deal with it in
  the next section.
- You will notice a delta also has comments. This is because we can't
  sort anything, with deltas, so for trivia having preceding comments
  we put them here.
#+end_notes

*** src_haskell{AnnListItem}

#+begin_src haskell
-- | Annotation for items appearing in a list. They can have one or
-- more trailing punctuations items, such as commas or semicolons.
data AnnListItem
  = AnnListItem {
      lann_trailing  :: [TrailingAnn]
      }
data TrailingAnn
  = AddSemiAnn    { ta_location :: EpaLocation }  -- ^ Trailing ';'
  | AddCommaAnn   { ta_location :: EpaLocation }  -- ^ Trailing ','
..
#+end_src

#+begin_notes
- A src_haskell{TrailingAnn} is an enumeration of a kind of trailing
  item and its src_haskell{EpaLocation}
  - So semicolon, comma, arrow, darrow, and vertical bar
- we saw them in the previous section, a semicolon
- And this is how we do the "loose attachement" of trailing anns.
#+end_notes

*** Sanity check

   #+begin_example
   (L
    (EpAnn
     (EpaSpan { DumpParsedAst.hs:5:1-16 })
     (AnnListItem
      [])
     (EpaComments
      []))
      ...
   #+end_example


#+begin_notes
- This is what a dump of an AST using this location type looks like,
  from a GHC test
- After this deep dive into types, let's come up for air a bit.
- If you recall in the handwavy part we spoke about span being the
  source of truth, the thing we trust.
- src_haskell{SrcSpan} we trust is the one in the src_haskell{EpAnn entry}, using the
  src_haskell{EpaSpan} constructor.
- If we need to move things around, the surgery happens by replacing
  it with an appropriate src_haskell{EpaDelta} version, just for the
  point where the change happens, and maybe the immediately following one
- For ghc-exactprint old hands, src_haskell{makeDeltaAst} is no longer required (but still exists)
- Next we look at the storage of internal annotations
#+end_notes

** Internal Annotations

  - src_haskell{SourceText} for Literals,
  - keywords (via src_haskell{AnnKeywordId} or src_haskell{EpToken})

 #+begin_notes
- everything that is not a location, comment, or surrounding
  information, but is needed for exact printing.
- SourceText keeps the as-written source text of a literal, so it can
  be used when printing.
- keywords or trivia are all the other punctuation marks.
  - When not in a trailing usage.
- Comments are also stored in the src_haskell{Located} part now
 #+end_notes

*** src_haskell{AnnKeywordId}

#+begin_src haskell
data AnnKeywordId
    ...
    | AnnIn
    | AnnLet
data AddEpAnn = AddEpAnn AnnKeywordId EpaLocation
#+end_src

#+begin_notes
- This is the original mechanism for capturing keywords.
- It is an enumeration of what it is, together with its location.
- It tells us what to print, where
#+end_notes

*** src_haskell{EpToken}

#+begin_src haskell
data EpToken (tok :: Symbol)
  = NoEpTok
  | EpTok !EpaLocation
#+end_src

Used as a type: src_haskell{EpTok "let"}

#+ATTR_REVEAL: :frag t
#+begin_src haskell
-- Extract string for printing
getEpTokenString :: forall tok. KnownSymbol tok => EpToken tok -> Maybe String
getEpTokenString NoEpTok = Nothing
getEpTokenString (EpTok _) = Just $ symbolVal (Proxy @tok)
#+end_src

#+begin_notes
- This is the new mechanism. It ie likely to supplant
  src_haskell{AddEpAnn} and src_haskell{AnnKeywordId}
- Apart from src_haskell{NoEpTok}, this is isomorphic to
  src_haskell{AddEpAnn}, in that it tells us what to print, and where
- <NEXT>
- And this shows you how to get the "let" back out for the example
#+end_notes

*** Internal Annotation storage
#+begin_notes
Back into type function land, as we look into how these keywords are
stored in an AST element.
#+end_notes

*** Trees That Grow
- GHC AST implements “Trees That Grow”
- This means extra information can be carried, computed via type classes
- We call them "Extension points"

*** Refresher
#+begin_src haskell
data HsExpr p
  ...
  | HsLet (XLet p) (HsLocalBinds p) (LHsExpr  p)

type family XLet x
#+end_src
#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance XLet GhcPs = (EpToken "let", EpToken "in")
#+end_src
#+ATTR_REVEAL: :frag t
[[./images-work/let-in-boxes-middle-smaller.png]]
#+begin_notes
- Every constructor in the GHC AST has a first field named something
  like XLet for HsLet constructor
- It is parameterised by the global AST parameter p,
  src_haskell{GhcPs} for us
- And there is a type family for it, so instances can be defined to
  map it onto a concrete type.
- <NEXT>
- For XLet and GhcPs this is a tuple for a let and an in src_haskell{EpToken}
- <NEXT>
- Going back to our example, these capture the locations in violet
#+end_notes

** Recap

#+ATTR_REVEAL: :frag appear
Questions?

#+begin_notes
This section has scratched the surface. There is a lot more I have not covered, e.g.
- src_haskell{LocatedN RdrName}
- Annotations around lists, context, pragmas and so on
- But we will now look at how we use it for its intended purpose,
  tools to change and emit updated source.
- Recall my original motivation was the haskell refactorer
- But first, any questions?
- <NEXT>
#+end_notes

* What it means outside GHC
- The Exact Print Annotations are packaged for use in [[https://hackage.haskell.org/package/ghc-exactprint][ghc-exactprint]]
- Generally a "hidden" library, enabling others
  - hlint apply hints
  - various plugins in HLS
  - retrie
  - built for HaRe, but that now languishes

** ghc-exactprint big picture
- Parse
- Transform
- Print

#+begin_notes
- The usual thing. input, process, output.
- Lets look at each in turn
#+end_notes

** ghc-exactprint parsing

#+begin_src haskell
type Parser a = GHC.DynFlags -> FilePath -> String -> ParseResult a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
parseExpr :: Parser (GHC.LHsExpr GHC.GhcPs)
parseImport :: Parser (GHC.LImportDecl GHC.GhcPs)
parseType :: Parser (GHC.LHsType GHC.GhcPs)
parseDecl :: Parser (GHC.LHsDecl GHC.GhcPs)
parseStmt :: Parser (GHC.ExprLStmt GHC.GhcPs)
parsePattern :: Parser (GHC.LPat GHC.GhcPs)
#+end_src

#+begin_notes
- This is a wrapper around the GHC parser
- a pure function
   - there are helpers to build appropriate src_haskell{DynFlags}
   - FilePath is used just for SrcSpan construction
   - String is the source
 <NEXT>
- We have ones for various subcomponents
- They are an option for constructing fragments to be inserted into an
  existing AST somewhere
#+end_notes

*** ghc-exactprint parseModule

#+begin_src haskell
parseModule :: LibDir -> FilePath -> IO (ParseResult GHC.ParsedSource)
#+end_src

#+begin_notes
- This is the main one used when actually changing a module
- src_haskell{LibDir} is where the GHC being used is installed. It can
  be retrieved using the [[https://hackage.haskell.org/package/ghc-paths][ghc-paths]] package
- "best effort" with CPP
  - compares original with preprocessed, and turns the diff into
    comments
  - cannot work if =#define XX Blah= and then =XX= is used. =XX= added as a comment, as well as =Blah=
- Honours pragmas, but you need to set src_haskell{DynFlags} for any e.g. project-wide options
#+end_notes

** ghc-exactprint transform
#+begin_notes
- This is the "process" step after parsing the input
- It is the reason we have src_haskell{ghc-exactprint} and the exact
  print annotations in GHC
- Intention: allow the smallest changes possible, when applying a
  change to the AST
- But first lets go off at a tangent
#+end_notes

*** Comments

Stored in src_haskell{EpAnn}

#+begin_src haskell
data EpAnnComments = EpaComments
                        { priorComments :: ![LEpaComment] }
                   | EpaCommentsBalanced
                        { priorComments     :: ![LEpaComment]
                        , followingComments :: ![LEpaComment] }
#+end_src

#+begin_notes
- Lets talk about comments
- src_haskell{EpAnn} is the "super src_haskell{SrcSpan}" we use for locations
- The initial parsing is optimised for speed, you are not necessarily
  going to change things
- Once you decide to move thing around, you need to decide which
  comments to bring along.
- The comments constructors initially carry src_haskell{priorComments} only, which
  precede the given declarations.
#+end_notes

*** src_haskell{balanceComments}

#+begin_src haskell
-- a random comment


-- here is a function
foo = 3
-- here is a trailing comment

-- Another random aside

-- another function
bar = 2
#+end_src

#+begin_notes
- ~ghc-exactprint~ has src_haskell{balanceComments} and src_haskell{balanceCommentsList}
- These use heuristics to "attach" comments to the appropriate
  declaration in a list
- Here is some example source.  When we balance comments
#+end_notes

*** becomes

#+begin_src haskell
-- a random comment
#+end_src

#+begin_src haskell
-- here is a function
foo = 3
-- here is a trailing comment
#+end_src

#+begin_src haskell
-- Another random aside

-- another function
bar = 2
#+end_src

#+begin_notes
- The first comment is attached to the module header. Or to the first
  declaration if it is a lower level list
- The next two become prior and following comments for foo.
- following comments are kept if they immediately follow a declaration.
- And the last two become prior comments for bar.
- This makes a given list of declarations ready for modification.
  - You can take one and move it somewhere else, or insert a new one
    in between, and hopefully the comments will still make sense.
#+end_notes

*** src_haskell{FunBind} comments

#+begin_src haskell
-- a random comment


-- here is a function
foo True = 3
-- here is a trailing comment

-- Another random aside

-- another function
foo False = 2
-- trailing second fun
#+end_src

#+begin_notes
- src_haskell{FunBind} is weird
- it combines all the equations for a particular function
- each shows up as a src_haskell{Match}, which is self-contained, and
  is the original parsed src_haskell{FunBind} declaration
- So we have a similar setup to the previous one, but they are all
  part of the same src_haskell{FunBind}
#+end_notes

*** becomes

#+begin_src haskell
-- a random comment
#+end_src

On FunBind prior comments
#+begin_src haskell
-- here is a function
#+end_src

First match (OOPS, BUG in 1.10.0.0)
#+begin_src haskell
foo True = 3
#+end_src

Second match
#+begin_src haskell
-- here is a trailing comment

-- Another random aside

-- another function
foo False = 2
#+end_src

On FunBind following comments
#+begin_src haskell
-- trailing second fun
#+end_src

#+begin_notes
- The first comment is as before
- Rest are as per the comments
- So we have prior and following comments for the funbind as a whole,
  at the top level.
- And each interior match, bar the first and last, has its own prior
  and following comments.
#+end_notes

*** Produced by

#+begin_src haskell
test = TestList [mkTestModChange libdir balanceComments "AFile.hs"]

balanceComments :: LibDir -> (ParsedSource -> IO ParsedSource)
balanceComments _libdir lp = return $ replaceDecls lp ds'
  where
    ds = hsDecls lp
    ds' = balanceCommentsList ds
#+end_src

#+begin_notes
- This is a function that changes a GHC ParsedSource
- It gets a LibDir in case we want to parse a new fragment for insertion
- You will notice that in addition to balanceCommentsList, it uses
  - hsDecls and replaceDecls.
  - We will talk about them next
#+end_notes

** src_haskell{class HasDecls}

#+begin_src haskell
class (Data t) => HasDecls t where
    hsDecls :: t -> [LHsDecl GhcPs]
    replaceDecls :: t -> [LHsDecl GhcPs] -> t
#+end_src

Identity

#+begin_src haskell
exactPrint x === exactPrint (replaceDecls x (hsDecls x))
#+end_src

#+begin_notes
- hsDecls
  - Return the 'HsDecl's that are directly enclosed in the given
    syntax phrase. They are always returned in the wrapped 'HsDecl'
    form, even if orginating in local decls. This is safe, as
    annotations never attach to the wrapper, only to the wrapped item.
- replaceDecls
  - Replace the directly enclosed decl list by the given decl list. As
    part of replacing it will update list order annotations, and
    rebalance comments and other layout changes as needed.
- And it should preserve the identity that replacing the decls you
  just got should print the same.
#+end_notes

*** src_haskell{replaceDecls}

    #+begin_src haskell
    -- |This is a function
    foo = x -- comment1
    -- trailing comment
    #+end_src

    to

    #+begin_src haskell
    -- |This is a function
    foo = x -- comment1
      where
        nn = 2
    -- trailing comment
    #+end_src
#+begin_notes
- This is the effect of calling src_haskell{replaceDecls} on the
  specific src_hakell{Match} of the function src_haskell{foo}
- You will notice it inserts the now-needed src_haskell{where}
- And does sane things with the comments
#+end_notes

*** code for the replace

#+begin_src haskell
addLocaLDecl1 :: Changer
addLocaLDecl1 libdir top = do
  Right decl <- withDynFlags libdir (\df -> parseDecl df "decl" "nn = 2")
  let
      (de1:d2:ds) = hsDecls top
      (de1',d2') = balanceComments de1 d2
      (de1'',_) = modifyValD (getLocA de1') de1' $ \_m ds ->
                   (decl : ds, Nothing)
  return $ replaceDecls top (de1'':d2':ds)
#+end_src

#+begin_notes
- We parse a new declaration src_haskell{nn = 2}
  - NOTE: its initial location is ignored, we use the surrounding decl
    list context for the starting point.
- Then we get the list of decls, broken into first, next and rest
  - In the source example there is a second function, so we can show
    the trailing comments
- we balance comments betwen the first and second declaration
- and  call modifyValD to do the work.
  - I will explain more in the next slides,
  - but the key point is the lambda that receives the existing src_haskell{Match}
    local binds in src_haskell{ds} and prepends src_haskell{decl} to
    them
- And then replace the modified top-level decls
- ghc-exactprint old hands will notice that apart from parsing, all
  the code is pure
#+end_notes

*** src_haskell{modifyValD}
#+begin_src haskell
..
[ma1,_ma2] = ms -- of de1
(de1',_) = modifyValD (getLocA ma1) de1 $ \_m decls ->
             (newDecl : decls, Nothing)
#+end_src

#+begin_src haskell
type Decl  = LHsDecl GhcPs
type PMatch = LMatch GhcPs (LHsExpr GhcPs)
modifyValD
   :: forall t.
   -> SrcSpan
   -> Decl
   -> (PMatch -> [Decl] -> ([Decl], Maybe t))
   -> (Decl, Maybe t)
#+end_src

#+begin_notes
- So lets look at src_haskell{modifyValD}
- It modifies a  src_haskell{FunBind} wrapped in a src_haskell{ValD}.
- The supplied src_haskell{SrcSpan} is used to identify the specific
  src_haskell{Match} to be transformed, for when there are multiple of
  them.
- The other parameters are
  - The src_haskell{FunBind}, as a src_haskell{Decl}.
  - A function taking a src_haskell{Match} and a list of its local binds (as src_haskell{Decl}s)
    - And returning updated local binds, and src_haskell{Maybe} whatever
- And it returns the updated src_haskell{FunBind} as a src_haskell{Decl}
- It is a bit janky, no need to return src_haskell{Maybe t}, user can wrap it in
  state if they need it
#+end_notes

*** There is a lot going on under the hood
- unpack the src_haskell{FunBind} for comments
- for the specific src_haskell{Match}
  - extract the local binds
  - sorted according to the src_haskell{AnnSortKey}
  - as decls
- apply the function
- when replacing, add or remove src_haskell{where} if it was empty or becomes empty
- update the src_haskell{AnnSortKey}
- pack the src_haskell{FunBind} for comments

#+begin_notes
- We did not go into src_haskell{AnnSortKey}. It stores the tags
  giving the merge order.
- note: it is up to the user-supplied function to call
  src_haskell{balanceComments} on the provided decls if needed.
- I will explain about packing and unpacking funbinds next
#+end_notes

*** packFunBind, unpackFunBind
- unpackFunBind
- packFunBind

#+begin_notes
- As I explained earlier, if we are working with a
  src_haskell{FunBind} in a list of src_haskell{Decl}s, we need to be
  able to work with its prior and following comments, for example to
  balance comments
- But a src_haskell{FunBind} is just a container for self-contained
  src_haskell{Match}es, and those are the things we modify
- So src_haskell{unpackFunBind} takes these src_haskell{ValD} level
  prior and following comments and pushes them down to the first and
  last src_haskell{Match} respectively
- After changes are made to the matches, src_haskell{packFunBind} does
  the reverse
#+end_notes

*** insertAt and friends

#+begin_src haskell
insertAtStart, insertAtEnd :: HasDecls ast => ast -> LHsDecl GhcPs -> ast
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
insertAfter, insertBefore :: HasDecls (LocatedA ast)
                          => LocatedA old
                          -> LocatedA ast
                          -> LHsDecl GhcPs
                          -> LocatedA ast
#+end_src

#+begin_notes
- There is another set of utilities, put in by Matt Pickering for the
  hlint apply refact integration
- Insert a declaration at the src_haskell{beginning or end} of the subdecls of the
  given AST item having sub-declarations
- <NEXT>
- Insert a declaration at a src_haskell{specific location} in the
  subdecls
- Note that src_haskell{insertBefore} and src_haskell{insertAfter}
  will only work on a list of decls without deltas in them
  - Which is fine, for a one-shot change
#+end_notes

** ghc-exactprint print

#+begin_src haskell
exactPrint :: ExactPrint ast => ast -> String
#+end_src

#+begin_notes
- The output stage of "input, process output"
- This is the heart of the thing, it accurately reproduces the ast,
  with modifications.
- But we will not look in detail, it is too complex for the time
  allowed
- I will be around, can take anyone interested over it
#+end_notes

** Name tie-ups
- All src_haskell{RdrName}s in the AST are src_haskell{LocatedN}, containing
  a src_haskell{SrcSpan} when originally parsed.
- The src_haskell{RenamedSource} does not remove named locations,
  although it may move them around a bit.
- So perform a generic traversal of the src_haskell{RenamedSource},
  building a map of src_haskell{SrcSpan -> Name}

#+begin_notes
- And now on to some more tangential things, as we head toward wrapping
- <READ SLIDE>
- This lets you use the Renamer output for the parse source
- I am a bit out of the loop at the moment, this functionality may
  already exist somewhere
#+end_notes

* Future
- Fixity info
- src_haskell{GHC_CPP}
- Free vars?
- Easy Export of Name table for lookup?
- ghc-exactprint API
  - currently provisional
  - should it be split?
  - where should it live?
- Link-up with ghc-lib-parser

#+begin_notes
- Here are some things that I think are worth doing around this area
- Fixity.
  - The problem is that the ParseSource does not know operator
    precedence, so builds a tree giving all operators the same
    precedence.
  - In GHC the tree is re-written in the the Renamer to properly
    reflect the actual precedences
  - And it is vital to work with a rewritten tree.
  - We have code dealing with it in hlint, retrie, probably a few more.
    - And this is best effort, using known built in fixities
  - Solution is
    - put this fixity processing in one place
    - improve it, be making it available from GHC
- GHC CPP
  - The ghc-exactprint processing is very poor.
  - CPP is too powerful, it processes directives in comments, trailing backslashes, etc
  - I am convinced >90% of usage could be captured with a reduced power option
  - I have a GHC proposal, intend taking it forward real soon now
#+end_notes

* GHC 9.10
- Sorry for the breakage
- Porting/changes at [[https://gist.github.com/alanz/e127e7561ddf1cfeb07fbdee9a966794][Exact Print Annotations GHC 9.10 changes]]
- TLDR
  - remove src_haskell{makeDeltaAst}, otherwise there will be no src_haskell{SrcSpan}
    anywhere in the AST (but when ready to make a change, using it to
    capture spacing of the local thing being edited may help)
  - src_haskell{EpAnnNotUsed} is gone, use src_haskell{noAnn} instead
  - src_haskell{uniqueSrcSpanT} is no longer needed, use an appropriate
    src_haskell{EpaDelta} location instead
  - src_haskell{EpaDelta (DifferentLine row col)} interprets src_haskell{col} differently.
    You must add 1 to get the prior spacing.

* End

This presentation: https://alanz.github.io/hew2024/

- https://github.com/alanz/ghc-exactprint
- [[https://gist.github.com/alanz/e127e7561ddf1cfeb07fbdee9a966794][Exact Print Annotations GHC 9.10 changes]]
- [[https://github.com/ghc-proposals/ghc-proposals/pull/616][GHC CPP proposal]]
- Slides written in emacs [[https://orgmode.org/][org-mode]] using [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]] for [[https://revealjs.com/][reveal.js]] 

Questions?
