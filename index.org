#+Title: ghc-exactprint (HEW 2024)
#+Author: Alan Zimmerman
#+Email: @alanz@social.coop

#+REVEAL_TITLE_SLIDE:
# #+REVEAL_SLIDE_FOOTER: Haskell Ecosystem Workshop, ZuriHac 2024

#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5
#+OPTIONS: num:nil
#+OPTIONS: reveal_slide_number:c/t
#+OPTIONS: toc:1
#+OPTIONS: reveal_center:nil
# #+REVEAL_THEME: simple
# #+REVEAL_THEME: white-contrast
#+REVEAL_THEME: white_contrast_compact_verbatim_headers
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
# #+REVEAL_PLUGINS: (markdown notes )
# #+REVEAL_PLUGINS: (markdown notes highlight toc-pogress)
# #+REVEAL_PLUGINS: (markdown notes highlight zoom)
#+REVEAL_PLUGINS: (markdown notes zoom)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/toc-progress/toc-progress.css
# #+REVEAL_HIGHLIGHT_CSS: %r/plugin/highlight/github.css
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args    :exports code


#+ATTR_REVEAL: :reveal_slide_global_footer 'footer hello'

# ####################################################
# For TOC-progress, need in Reveal.initialize({
#
# // Optional libraries used to extend reveal.js
# dependencies: [
#     ..
#     { src: './reveal.js/plugin/toc-progress/toc-progress.js'
#       , async: true
#       , callback: function() { toc_progress.initialize(); toc_progress.create(); }
#     }
# ]
# });
# ####################################################

* ghc-exactprint

Alan Zimmerman

[[https://social.coop/@alanz][~@alanz@social.coop~]]

Haskell Ecosystem Workshop,
ZuriHac, 2024-06-07

* About Me
- Learned Haskell in 2012
- Decided to resurrect HaRe, using GHC backend
- First GHC commit Sep 2014
- Led to haskell-ide-engine, to expose it to users
- And into GHC to make it useful for this

* This Talk
- What is the problem being solved
- What it means inside GHC
- What it means outside GHC

#+begin_notes
- Going through material, it is a huge topic, chat to me at ZuriHac
- First a Hand-wavy attempt to motivate the problem being solved
- Then how we capture the required information inside GHC, aimed at
  GHC developers and ghc-exactprint users
- Finally how to use the provided facilities in the real world
#+end_notes

* Problem Being Solved
To allow a tool to
- start from a src_haskell{GHC ParsedSource},
- make changes to it,
- print source reflecting the changes.
#+ATTR_REVEAL: :frag t
  - And only the changes.

** Start from GHC ParsedSource
- It must accurately reflect the input source
    - Literals
    - ‘Trivia’
    - Spacing

#+begin_notes
- Unless care is taken, information vital to being able to reproduce
  the source will be lost.
- Broadly, Literals, Trivia, which is things like keywords, commas,
  semicolons, brackets of all kinds
- And of course Spacing.
- Let look at each of these in turn
#+end_notes

** Literals
#+ATTR_REVEAL: :frag appear
#+begin_src haskell
1, 0x01, 001, 0_01
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
{-# Language CPP #-}
{-# LANGUAGE CPP #-}
#+end_src

#+begin_notes
- Take parsing a simple integer constant, value 1.
  <NEXT>
  - These are all ways it can be written.
- Or a pragma. <NEXT>
- So we have to keep the as-written text for all of these.
#+end_notes

** Trivia

#+begin_src haskell
let
   fa :: Int
   fa = 1
in fa
#+end_src

#+begin_notes
- Here is a fragment of code for a let expression.
- Trivia is `let`, `::`, `=`, `in`
#+end_notes

** Spacing

#+begin_notes
- Spacing is a funny thing.
- To simply reproduce the original code, we use the SrcSpan locations,
  no problem.
- But when you want to change things it gets complicated
  - Add or delete lines
  - Move a block of code from one place to another
    - Which can also change its indentation
 <NEXT>
#+end_notes

*** Principle for Spacing
A located AST element is treated as a self-contained unit
#+ATTR_REVEAL: :frag (appear appear)
- Looking in
  - Everything we need to print it is inside
  - Nothing is printed outside its span
- Looking out
  - We believe its span start point
  - We believe its span end point

#+begin_notes
- The exact print annotations embody a principle for spacing
- We apply this principle to be able to change and print
  (meaningfully) an ast.
  <NEXT>
- when we are inside the fragment, we have everything we need to be
  able to print it.
- we can print it based only on what is inside
  <NEXT>
- Looking out belief: we will clarify what this means in subsequent slides
#+end_notes

*** Spacing : printing
- A self-contained AST element has absolute locations
- When we print, we have a print head that we advance
- By distances calculated from the absolute locations
#+begin_notes
So
- We track two locations
  - The output print position, which always advances as we print
  - The offset calculation position, which we reset every time we enter a span
    - (remember “we believe the start position of a span”)
  - And also set every time we exit a span (“belief”)
  - Otherwise it also advances as we print
#+end_notes

*** Spacing example
[[./images-work/let-in-boxes-raw.png]]
#+begin_notes
Here is our let expression again
#+end_notes

*** Spacing example: top box
[[./images-work/let-in-boxes-top.png]]

#+begin_notes
At the top level, it is wrapped in a SrcSpan, setting its start and end position
#+end_notes
*** Spacing example: interior boxes
[[./images-work/let-in-boxes-middle.png]]
#+begin_notes
- If we go into the box, we find 4 more
- Two are trivia, two are more boxes we can go into
#+end_notes
*** Spacing example: spacing
[[./images-work/let-in-boxes-spacing.png]]
#+begin_notes
- We use distance from the end of one span to the start of the next to
work out how much space to emit when printing
- And we believe the start and end span locations for these
  calculations.
#+end_notes
*** Spacing : the missing piece
#+ATTR_REVEAL: :frag (appear appear)
- How do we change things?
- Deltas : Directly provide the spacing

 #+begin_notes
There is one remaining problem
<NEXT>
- How do we change things?
  - If we delete a piece, there will be a gap
  - If we add something, there will be some kind of jump
  <NEXT>
- Deltas
  - At the point where we change from one self contained point
    to a changed one, we supply the delta directly
  - Instead of calculating it from the offset calculation position.
  - And then set the offset calculation position according to the next
    actual span we see
  - We believe the start position in a span
  - It will come after a delta, so the spacing is known
 #+end_notes

*** Spacing size changes example
[[./images-work/let-in-longer-boxes-raw.png]]
#+begin_notes
- Say we want to rename `fa` to `falonger`, and just update the
  literal text in the AST
  - (for each appropriate `HsVar`)
- But we make no other changes
#+end_notes

*** Spacing size changes example: spacing
[[./images-work/let-in-longer-boxes-spacing.png]]
#+begin_notes
- It's hard to draw this, but imagine the blue boxes are the same ones
  from before, not changed for the longer insides
- The spacing calculation to the start point is unchanged, so all is
  good
- When we finish, we set the offset calculation position to the end of the span
  (We believe the end position)
- And so following spacing calculations are unaffected.
#+end_notes

*** Spacing : size changes 2

- The same principle holds for bigger changes.
- If we add additional content inside a span, it does not matter,
- The “contract” with the surroundings is the start of the span for
  entry spacing
- And the end of the span for exit spacing

*** Spacing : deltas

#+begin_src haskell
data DeltaPos
  = SameLine { deltaColumn :: Int }
  | DifferentLine { deltaLine :: Int, deltaColumn :: Int }
#+end_src

#+begin_notes
- The red arrows above map onto a `DeltaPos`, which can have line/col
- Haskell is a layout-sensitive language
- Our offset position also tracks the current indentation level, so
  the src_haskell{deltaColumn} is added to that.
#+end_notes

** Ordering things

- src_haskell{ParsedSource} is not a completely accurate reflection of the original source.
- src_haskell{ValBinds} separates out src_haskell{[Sig]}  and src_haskell{[Bind]}
- src_haskell{ClassDecl} and src_haskell{ClsInstDecl} separate out src_haskell{Bind}s,
  src_haskell{Sig}s, Type family instances etc
- For all of these, the original source can have them in any order.

*** Ordering things 2

- For an unmodified AST there is no problem, you just sort by start of
  span.
- But a modified one may have rearranged the existing ones, or brought
  in ones from elsewhere.
- And may have adjusted the spacing with explicit deltas.

*** Order in lists 3
[[./images-work/ordering-smaller.png]]
#+ATTR_REVEAL: :frag t
[[./images-work/ordering-sortkey-smaller.png]]

#+begin_notes
so we draw first from the signatures, then the binds, and same again.
- Each specific list is physically ordered, so for src_haskell{ValBinds} we know
  the order of the sigs, and of the binds.
- But we don’t know the interleaving.
- We supply this in an src_haskell{AnnSortKey}, which drives a merge process.
- It keeps a list of src_haskell{SigDTag} or src_haskell{BindTag} for
  a src_haskell{ValBind}, telling which list to draw from each time.
#+end_notes


** Comments
- Comments are the ultimate “trivia”. They have no influence on
  overall spacing and layout, but need to be preserved precisely.
- They can also occur absolutely anywhere in the source file.
- So we keep them in the "~SrcSpan~ on steroids" we wrap
  everything in, and fit them in when we print, if they fit into the
  current gap.
- It’s more complicated than that, but we will look into detail later.

** Trailing Items
[[./images-work/do-trailing-boxes.png]]

#+begin_notes
- The ast can be seen as an assembly of nested, ordered, self-contained boxes.
- To keep them reusable, we leave trailing items in the upper level.
- The self-contained belief we base everything on is that everything fits
  inside the AST Element span.
- This is true for everything, except trailing items.
- If you consider a list of items, each item is a standalone entity
- The commas exist as part of the surrounding structure.
- So if you move the item elsewhere, or replace it with something
  else, the trailing comma should be managed as part of that location.
- Others are semicolons, vertical bars, single and double arrows
#+end_notes

** End of Hand Wavy Part

- Hopefully you now have a high level understanding of what the exact
  print annotations are for
- Now we can look into some details of how things are captured in GHC


* What it means inside GHC
- Located things
- Internal Annotations

#+begin_notes
Time to dive into the detail. Two main divisions
#+end_notes

** Terminology
- AST means src_haskell{ParsedSource}

#+begin_src haskell
type ParsedSource = Located (HsModule GhcPs)
#+end_src

For now we accept src_haskell{GhcPs} as simply a marker of the AST from the
parsing phase.

** Located Things

#+begin_notes
- The AST is layered, as we saw in the boxes diagrams earlier.
- The types around location are a bit complex, being driven mainly by
  type families.
- My mental model is they are functions from a type to a type.
- Lets start with the first one
  <NEXT>
#+end_notes

*** Location

#+begin_src haskell
type family XRec p a = r | r -> a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type family Anno a = b
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance XRec (GhcPass p) a = GenLocated (Anno a) a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type LHsExpr p = XRec p (HsExpr p)
type instance Anno (HsExpr (GhcPass p)) = SrcSpanAnnA
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type SrcSpanAnnA = EpAnn AnnListItem
#+end_src

#+begin_notes
- XRec has a parameter p, and maps a type 'a' to a type 'r', and fundeps say the reverse holds too.
- `p` is a parameter that is chased through the entire AST, and for `ParsedSource` is always `GhcPs`
  <NEXT>
- Anno is a type function from `a` to `b`
  <NEXT>
- We create an instance (= mapping) of XRec for all GhcPass types as being located by Anno a
- Lets make this concrete
  <NEXT>
- LHsExpr is defined as an XRec type
- And it's Anno instance is SrcSpanAnnA
  <NEXT>
- which in turn is this EpAnn AnnListItem
#+end_notes

*** EpAnn

#+begin_src haskell
data EpAnn ann = EpAnn
         { entry    :: !Anchor -- basically SrcSpan when parsed
         , anns     :: !ann
         , comments :: !EpAnnComments
         }
type Anchor = EpaLocation
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type EpaLocation = EpaLocation' [LEpaComment]
data EpaLocation' a = EpaSpan !SrcSpan
                    | EpaDelta !DeltaPos !a
#+end_src

#+begin_notes
- EpAnn is an augmented SrcSpan
- the `entry` field is basically a SrcSpan when parsed
- `ann` is the parameterised type, `AnnListItem` in our example
- `comments` captures any comments included in the immediate
  descendents of the thing being located by this. between the sub
  boxes in the first section.
  <NEXT>
- As I said, the as-parsed EpaLocation is EpaSpan, holding a SrcSpan
- EpaDelta is used for editing and reprinting, we will deal with it in
  the next section.
- You will notice a delta also has comments. This is because we can't
  sort anything, with deltas, so for trivia having preceding comments
  we put them here.
#+end_notes

*** src_haskell{AnnListItem}

#+begin_src haskell
-- | Annotation for items appearing in a list. They can have one or
-- more trailing punctuations items, such as commas or semicolons.
data AnnListItem
  = AnnListItem {
      lann_trailing  :: [TrailingAnn]
      }
#+end_src

#+begin_notes
- A trailingann is an enumeration of a kind of trailing item and its EpaLocation
  - So semicolon, comma, arrow, darrow, and vertical bar
- we saw them in the previous section, a semicolon
#+end_notes

*** Sanity check

Tie up to prior hand wavy part
   #+begin_example
   (L
    (EpAnn
     (EpaSpan { DumpParsedAst.hs:5:1-16 })
     (AnnListItem
      [])
     (EpaComments
      []))
      ...
   #+end_example


#+begin_notes
- After this deep dive into types, let's come up for air a bit.
- If you recall in the handwavy part we spoke about span being the
  source of truth, the thing we believe.
- src_haskell{SrcSpan} we "believe" is the one in the src_haskell{EpAnn entry}, using the
  src_haskell{EpaSpan} constructor.
- If we need to move things around, the surgery happens by replacing
  it with an appropriate src_haskell{EpaDelta} version, just for the
  point where the change happens.
- For ghc-exactprint old hands, makeDeltaAst is no longer required (but still exists)
- Now back to the next kind, storage of internal annotations
#+end_notes

** Internal Annotations

  - src_haskell{SourceText} for Literals,
  - keywords (via src_haskell{AnnKeywordId} or src_haskell{EpToken})

 #+begin_notes
- everything that is not a location, comment, or surrounding
  information, but is needed for exact printing.
 SourceText keeps the as-written source text of a literal, so it can be used when printing.
- keywords or trivia are all the other punctuation marks.
  - When not in a trailing usage.
 #+end_notes

*** src_haskell{AnnKeywordId}

#+begin_src haskell
data AnnKeywordId
    ...
    | AnnIn
    | AnnLet
data AddEpAnn = AddEpAnn AnnKeywordId EpaLocation
#+end_src

#+begin_notes
- This is the original mechanism for capturing trivia.
- It is an enumeration of what it is, together with its location.
#+end_notes

*** src_haskell{EpToken}


#+begin_src haskell
data EpToken (tok :: Symbol)
  = NoEpTok
  | EpTok !EpaLocation
#+end_src

Used as a type src_haskell{EpTok "let"}

#+ATTR_REVEAL: :frag t
#+begin_src haskell
-- Extract string for printing
getEpTokenString :: forall tok. KnownSymbol tok => EpToken tok -> Maybe String
getEpTokenString NoEpTok = Nothing
getEpTokenString (EpTok _) = Just $ symbolVal (Proxy @tok)
#+end_src

#+begin_notes
- This is the new mechanism. May eventually supplant AddEpAnn and AnnKeywordId
- Apart from src_haskell{NoEpTok}, this is isomorphic to src_haskell{AddEpAnn}
  <NEXT>
- And this shows you how to get the "let" back out for the example
#+end_notes

*** Internal Annotation storage
#+begin_notes
Back into type function land, as we look into how these keywords are
stored in an AST element.
#+end_notes

*** Trees That Grow
- GHC AST implements “Trees That Grow”
- This means extra information can be carried, computed via type classes
- We call them "Extension points"

*** Refresher
#+begin_src haskell
data HsExpr p
  ...
  | HsLet (XLet p) (HsLocalBinds p) (LHsExpr  p)

type family XLet x
#+end_src
#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance XLet GhcPs = (EpToken "let", EpToken "in")
#+end_src
#+ATTR_REVEAL: :frag t
[[./images-work/let-in-boxes-middle-smaller.png]]
#+begin_notes
- Every constructor in the GHC AST has a first field named something
  like XLet for HsLet constructor
- It is parameterised by the global AST parameter p
- And there is a type family for it, so instances can be defined to
  map it onto a concrete type.
  <NEXT>
- For XLet and GhcPs this is a tuple for a let and an in token
  <NEXT>
- Going back to our example, these capture the locations in violet
#+end_notes

** Recap

#+begin_notes
This section has scratched the surface. There is a lot more I have not covered, e.g.
- src_haskell{LocatedN RdrName}
- Annotations around lists, context, pragmas and so on
- But we will now look at how we use it for its intended purpose,
  tools to change and emit updated source.
- Recall my original motivation was the haskell refactorer
#+end_notes

* What it means outside GHC
- The Exact Print Annotations are packaged for use in [[https://hackage.haskell.org/package/ghc-exactprint][ghc-exactprint]]
- Generally a "hidden" library, enabling others
  - hlint apply hints
  - various plugins in HLS
  - built for HaRe, but that now languishes
  - retrie

** ghc-exactprint big picture
- Parse
- Transform
- Print

#+begin_notes
- The usual thing. input, process, output.
- Lets look at each in turn
#+end_notes

** ghc-exactprint parsing

#+begin_src haskell
type Parser a = GHC.DynFlags -> FilePath -> String -> ParseResult a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
parseExpr :: Parser (GHC.LHsExpr GHC.GhcPs)
parseImport :: Parser (GHC.LImportDecl GHC.GhcPs)
parseType :: Parser (GHC.LHsType GHC.GhcPs)
parseDecl :: Parser (GHC.LHsDecl GHC.GhcPs)
parseStmt :: Parser (GHC.ExprLStmt GHC.GhcPs)
parsePattern :: Parser (GHC.LPat GHC.GhcPs)
#+end_src

#+begin_notes
- a pure function
   - FilePath is used just for SrcSpan construction
   - String is the source
 <NEXT>
- We have ones for various subcomponents
- They are an option for constructing fragments to be inserted into an
  existing AST somewhere
#+end_notes

*** ghc-exactprint parseModule

#+begin_src haskell
parseModule :: LibDir -> FilePath -> IO (ParseResult GHC.ParsedSource)
#+end_src

#+begin_notes
- This is the main one used when actually changing a module
- "best effort" with CPP
  - compares original with preprocessed, and turns the diff into
    comments
  - cannot work if =#define XX Blah= and then =XX= is used. =XX= added as a comment, as well as =Blah=
- Honours pragmas, but you need to set src_haskell{DynFlags} for any e.g. project-wide options
#+end_notes

** ghc-exactprint transform
- The reason src_haskell{ghc-exactprint} exists
#+begin_notes
- And the exact print annotations in GHC
- Intention: smallest changes possible
- So makeDeltaAst is no longer needed, and makes it impossible to map
  locations back to the AST to be changed.
- But lets first go off at a tangent
#+end_notes

*** Comments

Stored in src_haskell{EpAnn}

#+begin_src haskell
data EpAnnComments = EpaComments
                        { priorComments :: ![LEpaComment] }
                   | EpaCommentsBalanced
                        { priorComments     :: ![LEpaComment]
                        , followingComments :: ![LEpaComment] }
#+end_src

#+begin_notes
- EpAnn is the "super SrcSpan" we use for locations
- The initial parsing is optimised for speed, you are not necessarily
  going to change things
- Once you decide to move thing around, you need to decide which
  comments to bring along.
- The comments constructors initially carry priorComments only, which
  precede the given declarations.
#+end_notes

*** src_haskell{balanceComments}

#+begin_src haskell
-- a random comment


-- here is a function
foo = 3
-- here is a trailing comment

-- Another random aside

-- another function
bar = 2
#+end_src

#+begin_notes
- ~ghc-exactprint~ has src_haskell{balanceComments} and src_haskell{balanceCommentsList}
- These use heuristics to "attach" comments to the appropriate
  declaration in a list
- Here is some example source.  When we balance comments
#+end_notes

*** becomes

#+begin_src haskell
-- a random comment
#+end_src

#+begin_src haskell
-- here is a function
foo = 3
-- here is a trailing comment
#+end_src

#+begin_src haskell
-- Another random aside

-- another function
bar = 2
#+end_src

#+begin_notes
- The first comment is attached to the module header. Or to the first
  declaration if it is a lower level list
- The next two become prior and following comments for foo.
- following comments are kept if they immediately follow a declaration.
- And the last two become prior comments for bar.
- This makes a given list of declarations ready for modification.
  - You can take one and move it somewhere else, or insert a new one
    in between, and hopefully the comments will still make sense.
#+end_notes

*** src_haskell{FunBind} comments

#+begin_src haskell
-- a random comment


-- here is a function
foo True = 3
-- here is a trailing comment

-- Another random aside

-- another function
foo False = 2
-- trailing second fun
#+end_src

#+begin_notes
- src_haskell{FunBind} is weird
- it combines all the equations for a particular function
- each shows up as a src_haskell{Match}, which is self-contained
#+end_notes

*** becomes

#+begin_src haskell
-- a random comment
#+end_src

On FunBind prior comments
#+begin_src haskell
-- here is a function
#+end_src

First match (OOPS, BUG in 1.10.0.0)
#+begin_src haskell
foo True = 3
#+end_src

Second match
#+begin_src haskell
-- here is a trailing comment

-- Another random aside

-- another function
foo False = 2
#+end_src

On FunBind following comments
#+begin_src haskell
-- trailing second fun
#+end_src

#+begin_notes
- The first comment is as before
- Rest are as per the comments
#+end_notes

*** Produced by

#+begin_src haskell
test = TestList [mkTestModChange libdir balanceComments "AFile.hs"]

balanceComments :: LibDir -> (ParsedSource -> IO ParsedSource)
balanceComments _libdir lp = return $ replaceDecls lp ds'
  where
    ds = hsDecls lp
    ds' = balanceCommentsList ds
#+end_src

#+begin_notes
- This is a function that changes a GHC ParsedSource
- It gets a LibDir in case we want to parse a new fragment for insertion
- You will notice that in addition to balanceCommentsList, it uses
  - hsDecls and replaceDecls
#+end_notes

** src_haskell{class HasDecls}

#+begin_src haskell
class (Data t) => HasDecls t where
    hsDecls :: t -> [LHsDecl GhcPs]
    replaceDecls :: t -> [LHsDecl GhcPs] -> t
#+end_src

#+begin_notes
- hasDecls
  - Return the 'HsDecl's that are directly enclosed in the given
    syntax phrase. They are always returned in the wrapped 'HsDecl'
    form, even if orginating in local decls. This is safe, as
    annotations never attach to the wrapper, only to the wrapped item.
- replaceDecls
  - Replace the directly enclosed decl list by the given decl list. As
    parto of replacing it will update list order annotations, and
    rebalance comments and other layout changes as needed.
#+end_notes

*** src_haskell{replaceDecls}

    #+begin_src haskell
    -- |This is a function
    foo = x -- comment1
    -- trailing comment
    #+end_src

    to

    #+begin_src haskell
    -- |This is a function
    foo = x -- comment1
      where
        nn = 2
    -- trailing comment
    #+end_src

*** code for the replace

#+begin_src haskell
addLocaLDecl1 :: Changer
addLocaLDecl1 libdir top = do
  Right (L ld (ValD _ decl)) <- withDynFlags libdir (\df -> parseDecl df "decl" "nn = 2")
  let
      decl' = setEntryDP (L ld decl) (DifferentLine 1 5)
      (de1:d2:d3:_) = hsDecls top
      (de1',d2') = balanceComments de1 d2
      (de1'',_) = modifyValD (getLocA de1') de1' $ \_m d ->
                   ((wrapDecl decl' : d), Nothing)
  return $ replaceDecls top [de1'', d2', d3]
#+end_src

*** src_haskell{modifyValD}
- Remember src_haskell{FunBind}?

#+begin_src haskell
..
[ma1,_ma2] = ms -- of de1
(de1',_) = modifyValD (getLocA ma1) de1 $ \_m decls ->
             (newDecl : decls, Nothing)
#+end_src

#+begin_src haskell
type Decl  = LHsDecl GhcPs
type PMatch = LMatch GhcPs (LHsExpr GhcPs)
modifyValD
   :: forall t. SrcSpan -> Decl
   -> (PMatch -> [Decl] -> ([Decl], Maybe t))
   -> (Decl, Maybe t)
#+end_src

#+begin_notes
- Modify a 'LHsBind' wrapped in a 'ValD'.
- For a 'FunBind' the supplied 'SrcSpan' is used to identify the
  specific 'Match' to be transformed, for when there are multiple of
  them.
- It is a bit janky, no need to return Maybe t, user can wrap it in
  state.
- It takes the FunBind, as a Decl.
- A function taking a Match and a list of its local binds (as Decls)
- And returning updated local binds, and whatever
- And it returns the updated FunBind as a decl
#+end_notes

*** There is a lot going on under the hood
- unpack the funbind for comments
- extract the local binds, sorted according to the AnnSortKey, as decls
- Apply the function
- When replacing, add or remove 'where' if it was empty or becomes empty
- And update the AnnSortKey
- pack the funbind for comments

*** packFunBind, unpackFunBind
- unpackFunBind
- packFunBind

#+begin_notes
- As I explained earlier, if we are working with a FunDecl in a list
  of Decls, we need to be able to work with its leading and trailing
  comments, for example to balance comments
- But a FunBind is just a container for self-contained matches, and
  those are the things we print
- So unpackFunBind takes these ValD level prior and following comments
  and pushes them down to the first and last match respectively
- After changes are made to the matches, packFunBind does the reverse
#+end_notes

*** insertAt and friends

#+begin_src haskell
insertAtStart, insertAtEnd :: HasDecls ast => ast -> LHsDecl GhcPs -> ast
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
insertAfter, insertBefore :: HasDecls (LocatedA ast)
                          => LocatedA old
                          -> LocatedA ast
                          -> LHsDecl GhcPs
                          -> LocatedA ast
#+end_src

#+begin_notes
- There is another set of utilities, put in by Matt Pickering for the
  hlint apply refact integration
- Insert a declaration at the beginning or end of the subdecls of the
  given AST item having sub-declarations
 <NEXT>
- Insert a declaration at a specific location in the subdecls of the
  given AST item having sub-declarations
#+end_notes

** ghc-exactprint print

#+begin_src haskell
exactPrint :: ExactPrint ast => ast -> String
#+end_src

#+begin_notes
- This is the heart of the thing
- But will not look in detail, it is too complex
- I will be around, can take anyone interested over it
#+end_notes

** Name tie-ups
- All src_haskell{RdrName}s in the AST are src_haskell{LocatedN}, containing
  a src_haskell{SrcSpan} when originally parsed.
- The src_haskell{RenamedSource} does not remove named locations,
  although it may move them around a bit.
- So perform a generic traversal of the src_haskell{RenamedSource},
  building a map of
 #+begin_src haskell
 SrcSpan -> Name
 #+end_src

* Future
- Fixity info
- src_haskell{GHC_CPP}
- Free vars?
- Easy Export of Name table for lookup?
- ghc-exactprint API
  - currently provisional
  - should it be split?
    - parsing
    - printing
    - low-level API
    rest outside
  - where should it live?
- Link-up with ghc-lib-parser

* GHC 9.10
- Sorry for the breakage
- Porting/changes at [[https://gist.github.com/alanz/e127e7561ddf1cfeb07fbdee9a966794][Exact Print Annotations GHC 9.10 changes]]
- TLDR
  - remove src_haskell{makeDeltaAst}, otherwise there will be no src_haskell{SrcSpan}
    anywhere in the AST (but when ready to make a change, using it to
    capture spacing of the local thing being edited may help)
  - src_haskell{EpAnnNotUsed} is gone, use src_haskell{noAnn} instead
  - src_haskell{uniqueSrcSpanT} is no longer needed, use an appropriate
    src_haskell{EpaDelta} location instead
  - src_haskell{EpaDelta (DifferentLine row col)} interprets src_haskell{col} differently.
    You must add 1 to get the prior spacing.

* End

- https://github.com/alanz/ghc-exactprint
- [[https://gist.github.com/alanz/e127e7561ddf1cfeb07fbdee9a966794][Exact Print Annotations GHC 9.10 changes]]

