#+Title: ghc-exactprint (HEW 2024)
#+Author: Alan Zimmerman
#+Email: @alanz@social.coop

#+REVEAL_TITLE_SLIDE:
# #+REVEAL_SLIDE_FOOTER: Haskell Ecosystem Workshop, ZuriHac 2024

#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5
#+OPTIONS: num:nil
#+OPTIONS: reveal_slide_number:c/t
#+OPTIONS: toc:1
#+OPTIONS: reveal_center:nil
# #+REVEAL_THEME: simple
# #+REVEAL_THEME: white-contrast
#+REVEAL_THEME: white_contrast_compact_verbatim_headers
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
# #+REVEAL_PLUGINS: (markdown notes )
# #+REVEAL_PLUGINS: (markdown notes highlight toc-pogress)
#+REVEAL_PLUGINS: (markdown notes highlight zoom)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/toc-progress/toc-progress.css
#+REVEAL_HIGHLIGHT_CSS: %r/plugin/highlight/github.css
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args    :exports code


#+ATTR_REVEAL: :reveal_slide_global_footer 'footer hello'

# ####################################################
# For TOC-progress, need in Reveal.initialize({
#
# // Optional libraries used to extend reveal.js
# dependencies: [
#     ..
#     { src: './reveal.js/plugin/toc-progress/toc-progress.js'
#       , async: true
#       , callback: function() { toc_progress.initialize(); toc_progress.create(); }
#     }
# ]
# });
# ####################################################

* ghc-exactprint

Alan Zimmerman

[[https://social.coop/@alanz][~@alanz@social.coop~]]

Haskell Ecosystem Workshop,
ZuriHac, 2024-06-07

* About Me
- Learned Haskell in 2012
- Decided to resurrect HaRe, using GHC backend
- First GHC commit Sep 2014
- Led to haskell-ide-engine, to expose it to users
- And into GHC to make it useful for this

* This Talk
- What is the problem being solved
- What it means inside GHC
- What it means outside GHC

#+begin_notes
- Going through material, it is a huge topic, chat to me at ZuriHac
- First a Hand-wavy attempt to motivate the problem being solved
- Then how we capture the required information inside GHC, aimed at
  GHC developers and ghc-exactprint users
- Finally how to use the provided facilities in the real world
#+end_notes

* Problem Being Solved
To allow a tool to
- start from a ~GHC~ ~ParsedSource~,
- make changes to it,
- print source reflecting the changes.
#+ATTR_REVEAL: :frag t
  - And only the changes.

** Start from GHC ParsedSource
- It must accurately reflect the input source
    - Literals
    - ‘Trivia’
    - Spacing

#+begin_notes
- Unless care is taken, information vital to being able to reproduce
  the source will be lost.
- Broadly, Literals, Trivia, which is things like keywords, commas,
  semicolons, brackets of all kinds
- And of course Spacing.
- Let look at each of these in turn
#+end_notes

** Literals
#+ATTR_REVEAL: :frag appear
#+begin_src haskell
1, 0x01, 001, 0_01
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
{-# Language CPP #-}
{-# LANGUAGE CPP #-}
#+end_src

#+begin_notes
- Take parsing a simple integer constant, value 1.
  <NEXT>
  - These are all ways it can be written.
- Or a pragma. <NEXT>
- So we have to keep the as-written text for all of these.
#+end_notes

** Trivia

#+begin_src haskell
let
   fa :: Int
   fa = 1
in fa
#+end_src

#+begin_notes
- Here is a fragment of code for a let expression.
- Trivia is `let`, `::`, `in`
#+end_notes

** Spacing

#+begin_notes
- Spacing is a funny thing.
- To simply reproduce the original code, we use the SrcSpan locations,
  no problem.
- But when you want to change things it gets complicated
  - Add or delete lines
  - Move a block of code from one place to another
    - Which can also change its indentation
#+end_notes

** Principle for Spacing
A located AST element is treated as a self-contained unit
#+ATTR_REVEAL: :frag (appear appear)
- Looking in
  - Everything we need to print it is inside
  - Nothing is printed outside its span
- Looking out
  - We believe its span start point
  - We believe its span end point

#+begin_notes
- We apply this principle to be able to change and print
  (meaningfully) an ast.
- Self-contained: when we are inside the fragment, we have everything
  we need to be able to print it.
- Self-contained: we can print it based only on what is inside
- If we apply a constant (line,col) offset to the whole thing, it will
  still print properly
- Implication
  - If we do some book-keeping about the start offset, we can print it
    anywhere
- What happens in the box, stays in the box
#+end_notes

** Spacing : printing
- A self-contained AST element has absolute locations
- When we print, we have a print head that we advance
- By distances calculated from the absolute locations
#+begin_notes
So
- We track two locations
  - The output print position, which always advances as we print
  - The offset calculation position, which we reset every time we enter a span
    - (remember “we believe the start position of a span”)
  - And also set every time we exit a span (“belief”)
  - Otherwise it also advances as we print
#+end_notes

** Spacing example
[[./images-work/let-in-boxes-raw.png]]
#+begin_notes
Here is our let expression again
#+end_notes

** Spacing example: top box
[[./images-work/let-in-boxes-top.png]]

#+begin_notes
At the top level, it is wrapped in a SrcSpan, setting its start and end position
#+end_notes
** Spacing example: interior boxes
[[./images-work/let-in-boxes-middle.png]]
#+begin_notes
- If we go into the box, we find 4 more
- Two are trivia, two are more boxes we can go into
#+end_notes
** Spacing example: spacing
[[./images-work/let-in-boxes-spacing.png]]
#+begin_notes
We use distance from the end of one span to the start of the next to
work out how much space to emit when printing
#+end_notes
** Spacing : the missing piece
#+ATTR_REVEAL: :frag (appear appear)
- How do we change things?
- Deltas : Directly provide the spacing

 #+begin_notes
There is one remaining problem
<NEXT>
- How do we change things?
  - If we delete a piece, there will be a gap
  - If we add something, there will be some kind of jump
  <NEXT>
- Deltas
  - At the point where we change from one self contained point
    to a changed one, we supply the delta directly
  - Instead of calculating it from the offset calculation position.
  - And then set the offset calculation position according to the next
    actual span we see
  - We believe the start position in a span
  - It will come after a delta, so the spacing is known
 #+end_notes

** Spacing size changes example
[[./images-work/let-in-longer-boxes-raw.png]]
#+begin_notes
- Say we want to rename `fa` to `falonger`, and just update the
  literal text in the AST
  - (for each appropriate `HsVar`)
- But we make no other changes
#+end_notes

** Spacing size changes example: spacing
[[./images-work/let-in-longer-boxes-spacing.png]]
#+begin_notes
- It's hard to draw this, but imagine the blue boxes are the same ones
  from before, not changed for the longer insides
- The spacing calculation to the start point is unchanged, so all is
  good
- When we finish, we set the offset calculation position to the end of the span
  (We believe the end position)
- And so following spacing calculations are unaffected.
#+end_notes

** Spacing : size changes 2

- The same principle holds for bigger changes.
- If we add additional content inside a span, it does not matter,
- The “contract” with the surroundings is the start of the span for
  entry spacing
- And the end of the span for exit spacing

** Spacing : deltas

#+ATTR_REVEAL: :code_attribs data-line-numbers
#+begin_src haskell
data DeltaPos
  = SameLine { deltaColumn :: Int }
  | DifferentLine { deltaLine :: Int, deltaColumn :: Int }
#+end_src

#+begin_notes
- The red arrows above map onto a `DeltaPos`, which can have line/col
- Haskell is a layout-sensitive language
- Our offset position also tracks the current indentation level, so
  the ~deltaColumn~ is added to that.
#+end_notes

** Ordering things

- ~ParsedSource~ is not a completely accurate reflection of the original source.
- ~ValBinds~ separates out ~[Sig]~  and ~[Bind]~
- ~ClassDecl~ and  ~ClsInstDecl~ separate out ~Bind~ s,
  ~Sig~ s, Type family instances etc
- For all of these, the original source can have them in any order.

** Ordering things 2

- For an unmodified AST there is no problem, you just sort by start of
  span.
- But a modified one may have rearranged the existing ones, or brought
  in ones from elsewhere.
- And may have adjusted the spacing with explicit deltas.

** Order in lists 3
[[./images-work/ordering-smaller.png]]
#+ATTR_REVEAL: :frag t
[[./images-work/ordering-sortkey-smaller.png]]

#+begin_notes
so we draw first from the signatures, then the binds, and same again.
- Each specific list is physically ordered, so for ~ValBinds~ we know
  the order of the sigs, and of the binds.
- But we don’t know the interleaving.
- We supply this in an ~AnnSortKey~, which drives a merge process.
- It keeps a list of ~SigDTag~ or ~BindTag~ for
  a ~ValBind~, telling which list to draw from each time.
#+end_notes


** Comments
- Comments are the ultimate “trivia”. They have no influence on
  overall spacing and layout, but need to be preserved precisely.
- They can also occur absolutely anywhere in the source file.
- So we keep them in the "~SrcSpan~ on steroids" we wrap
  everything in, and fit them in when we print, if they fit into the
  current gap.
- It’s more complicated than that, but we will look into detail later.

** Trailing Items
[[./images-work/do-trailing-boxes.png]]

#+begin_notes
- The ast can be seen as an assembly of nested, ordered, self-contained boxes.
- To keep them reusable, we leave trailing items in the upper level.
- The self-contained belief we base everything on is that everything fits
  inside the AST Element span.
- This is true for everything, except trailing items.
- If you consider a list of items, each item is a standalone entity
- The commas exist as part of the surrounding structure.
- So if you move the item elsewhere, or replace it with something
  else, the trailing comma should be managed as part of that location.
- Others are semicolons, vertical bars, single and double arrows
#+end_notes

** End of Hand Wavy Part

- Hopefully you now have a high level understanding of what the exact
  print annotations are for
- Now we can look into some details of how things are captured in GHC


* What it means inside GHC
- Located things
- Internal Annotations

#+begin_notes
Time to dive into the detail. Two main divisions
#+end_notes

** Terminology
- AST: ~ParsedSource~

#+begin_src haskell
type ParsedSource = Located (HsModule GhcPs)
#+end_src

For now we accept ~GhcPs~ as simply a marker of the AST from the
parsing phase.

** Located Things

The AST is layered, as we saw in the boxes diagrams earlier.

*** Location

#+begin_src haskell
type family XRec p a = r | r -> a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type family Anno a = b
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance XRec (GhcPass p) a = GenLocated (Anno a) a
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance Anno (HsExpr (GhcPass p)) = SrcSpanAnnA
type LocatedA = GenLocated SrcSpanAnnA
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type SrcSpanAnnA = EpAnn AnnListItem
#+end_src

*** EpAnn

#+begin_src haskell
data EpAnn ann = EpAnn
         { entry    :: !Anchor -- basically SrcSpan when parsed
         , anns     :: !ann
         , comments :: !EpAnnComments
         }
type Anchor = EpaLocation
#+end_src

#+ATTR_REVEAL: :frag t
#+begin_src haskell
type EpaLocation = EpaLocation' [LEpaComment]
data EpaLocation' a = EpaSpan !SrcSpan
                    | EpaDelta !DeltaPos !a
#+end_src

*** ~AnnListItem~

#+begin_src haskell
-- | Annotation for items appearing in a list. They can have one or
-- more trailing punctuations items, such as commas or semicolons.
data AnnListItem
  = AnnListItem {
      lann_trailing  :: [TrailingAnn]
      }
#+end_src

*** Sanity check

Tie up to prior hand wavy part
   #+begin_example
   (L
    (EpAnn
     (EpaSpan { DumpParsedAst.hs:5:1-16 })
     (AnnListItem
      [])
     (EpaComments
      []))
      ...
   #+end_example

- ~SrcSpan~ we "believe" is the one in the ~EpAnn~ ~entry~, using the
  ~EpaSpan~ constructor.
- If we need to move things around, the surgery happens by replacing
  it with an appropriate ~EpaDelta~ version, just for the
  point where the change happens.

#+begin_notes
- After this deep dive into types, let's come up for air a bit.
- If you recall in the handwavy part we spoke about span being the
  source of truth, the thing we believe.
- For ghc-exactprint old hands, makeDeltaAst is no longer required (but still exists)
#+end_notes

** Internal Annotations

- everything that is not a location, comment, or surrounding
  information, but is needed for exact printing.
  - ~SourceText~ for Literals,
  - keywords (via ~AnnKeywordId~ or ~EpToken~)

*** ~AnnKeywordId~

Original mechanism
#+begin_src haskell
data AnnKeywordId
    ...
    | AnnIn
    | AnnLet
data AddEpAnn = AddEpAnn AnnKeywordId EpaLocation
#+end_src

*** ~EpToken~

New mechanism. May eventually supplant ~AnnKeywordId~

#+begin_src haskell
data EpToken (tok :: Symbol)
  = NoEpTok
  | EpTok !EpaLocation
#+end_src

Used as a type ~EpTok "let"~

#+begin_notes
Apart from ~NoEpTok~, this is isomorphic to ~AddEpAnn~
#+end_notes

#+ATTR_REVEAL: :frag t
#+begin_src haskell
-- Extract string for printing
getEpTokenString :: forall tok. KnownSymbol tok => EpToken tok -> Maybe String
getEpTokenString NoEpTok = Nothing
getEpTokenString (EpTok _) = Just $ symbolVal (Proxy @tok)
#+end_src

*** Internal Annotation storage

*** Trees That Grow
- GHC AST implements “Trees That Grow”
- This means extra information can be carried, computed via type classes
- "Extension points"

*** Refresher
#+begin_src haskell
data HsExpr p
  ...
  | HsLet (XLet p) (HsLocalBinds p) (LHsExpr  p)

type family XLet x
#+end_src
#+ATTR_REVEAL: :frag t
#+begin_src haskell
type instance XLet GhcPs = (EpToken "let", EpToken "in")
#+end_src
#+ATTR_REVEAL: :frag t
[[./images-work/let-in-boxes-middle-smaller.png]]

* What it means outside GHC
- The Exact Print Annotations are packaged for use in [[https://hackage.haskell.org/package/ghc-exactprint][ghc-exactprint]]
- Generally a "hidden" library, enabling others
  - hlint apply hints
  - various plugins in HLS
  - built for HaRe, but that now languishes
  - retrie

** ghc-exactprint big picture
- Parse
- Transform
- Print

** ghc-exactprint parsing
- ~parseModule~
- "best effort" with CPP
  - compares original with preprocessed, and turns the delta into
    comments
  - cannot work if =#define XX Blah= and then =XX= is used. =XX= added as a comment, as well as =Blah=
- Honours pragmas, but you need to set ~DynFlags~ for any e.g. project-wide options

** ghc-exactprint transform
- The reason ~ghc-exactprint~ exists
- Intention: smallest changes possible

*** Comments

Stored in ~EpAnn~

#+begin_src haskell
data EpAnnComments = EpaComments
                        { priorComments :: ![LEpaComment] }
                   | EpaCommentsBalanced
                        { priorComments     :: ![LEpaComment]
                        , followingComments :: ![LEpaComment] }
#+end_src

Once you decide to move thing around, you need to decide which
comments to bring along.

*** ~balanceComments~

~ghc-exactprint~ has ~balanceComments~ and ~balanceCommentsList~

These use heuristics to "attach" comments to the appropriate top level
declaration.

#+begin_src haskell
-- a random comment


-- here is a function
foo = 3
-- here is a trailing comment

-- Another random aside

-- another function
bar = 2
#+end_src


*** becomes

#+begin_src haskell
-- a random comment
#+end_src

#+begin_src haskell
-- here is a function
foo = 3
-- here is a trailing comment
#+end_src

#+begin_src haskell
-- Another random aside

-- another function
bar = 2
#+end_src

*** ~FunBind~ comments

- ~FunBind~ is weird
- it combines all the equations for a particular function
- each shows up as a ~Match~, which is self-contained

#+begin_src haskell
-- a random comment


-- here is a function
foo True = 3
-- here is a trailing comment

-- Another random aside

-- another function
foo False = 2
-- trailing second fun
#+end_src

*** becomes

#+begin_src haskell
-- a random comment
#+end_src

On FunBind prior comments
#+begin_src haskell
-- here is a function
#+end_src

First match (OOPS, BUG in 1.10.0.0)
#+begin_src haskell
foo True = 3
#+end_src

Second match
#+begin_src haskell
-- here is a trailing comment

-- Another random aside

-- another function
foo False = 2
#+end_src

On FunBind following comments
#+begin_src haskell
-- trailing second fun
#+end_src

*** Produced by

#+begin_src haskell
test = TestList [mkTestModChange libdir balanceComments "AFile.hs"]

balanceComments :: Changer
balanceComments _libdir lp = return $ replaceDecls lp ds'
  where
    ds = hsDecls lp
    ds' = balanceCommentsList ds
#+end_src

** ~class HasDecls~

#+begin_src haskell
class (Data t) => HasDecls t where
    hsDecls :: t -> [LHsDecl GhcPs]
    replaceDecls :: t -> [LHsDecl GhcPs] -> t
#+end_src

#+begin_notes
    - hasDecls
      - Return the 'HsDecl's that are directly enclosed in the
      given syntax phrase. They are always returned in the wrapped
      'HsDecl' form, even if orginating in local decls. This is safe,
      as annotations never attach to the wrapper, only to the wrapped
      item.
    - replaceDecls
      -
     Replace the directly enclosed decl list by the given
     decl list. As parto of replacing it will update list order
     annotations, and rebalance comments and other layout changes as needed.
    --
    For example, a call on replaceDecls for a wrapped 'FunBind' having no
    where clause will convert
    --
    @
    -- |This is a function
    foo = x -- comment1
    --
    in to
    --
    -- |This is a function
    foo = x -- comment1
      where
        nn = 2
#+end_notes

*** ~replaceDecls~

    #+begin_src haskell
    -- |This is a function
    foo = x -- comment1
    -- trailing comment
    #+end_src

    to

    #+begin_src haskell
    -- |This is a function
    foo = x -- comment1
      where
        nn = 2
    -- trailing comment
    #+end_src

*** code for the replace

#+begin_src haskell
addLocaLDecl1 :: Changer
addLocaLDecl1 libdir top = do
  Right (L ld (ValD _ decl)) <- withDynFlags libdir (\df -> parseDecl df "decl" "nn = 2")
  let
      decl' = setEntryDP (L ld decl) (DifferentLine 1 5)
      (de1:d2:d3:_) = hsDecls top
      (de1',d2') = balanceComments de1 d2
      (de1'',_) = modifyValD (getLocA de1') de1' $ \_m d ->
                   ((wrapDecl decl' : d), Nothing)
  return $ replaceDecls top [de1'', d2', d3]
#+end_src

*** ~modifyValD~
- Remember ~FunBind~?

#+begin_src haskell
..
[ma1,_ma2] = ms -- of de1
(de1',_) = modifyValD (getLocA ma1) de1 $ \_m decls ->
             (newDecl : decls, Nothing)
#+end_src

#+begin_src haskell
type Decl  = LHsDecl GhcPs
type PMatch = LMatch GhcPs (LHsExpr GhcPs)
modifyValD
   :: forall t. SrcSpan -> Decl
   -> (PMatch -> [Decl] -> ([Decl], Maybe t))
   -> (Decl, Maybe t)
#+end_src


#+begin_notes
-- |Modify a 'LHsBind' wrapped in a 'ValD'. For a 'PatBind' the
-- declarations are extracted and returned after modification. For a
-- 'FunBind' the supplied 'SrcSpan' is used to identify the specific
-- 'Match' to be transformed, for when there are multiple of them.

Note: now that everything is pure, and connected, pretty much not
needed.
#+end_notes

*** packFunBind, unpackFunBind
And packFunDecl, unpackFunDecl

*** addToList etc

*** replaceDecls sort order
- Remember ~AnnSortKey~?
- It is populated in ~replaceDecls~
- ~captureOrderBinds~
- ~replaceDeclsClassDecl~ (and ~hsDeclsClassDecl~)

- ~oderedDecls~
  When ~NoAnnSortKey~,
  - Assume working with an unchanged AST
  - use the locations of the decls and sort
  When ~AnnSortKey DeclTag~
  - Build ~Map.Map DeclTag [LHsDecl GhcPs]~ from assorted ~ClassDecl~ parts
  - 

** Summary
- balance comments
- manage funbind comment details
- manage ~where~ for adding/removing decls to ~HsValBinds~
- track sort order
- wrap/unwrap binds

** ghc-exactprint print
This is the heart of the thing

But will not look in detail, it is too complex

Suffice to say,

#+begin_src haskell
exactPrint :: ExactPrint ast => ast -> String
#+end_src

** Name tie-ups
- All ~RdrName~ s in the AST are ~LocatedN~, containing
  a ~SrcSpan~ when originally parsed.
- The ~RenamedSource~ does not remove named locations,
  although it may move them around a bit.
- So perform a generic traversal of the ~RenamedSource~,
  building a map of
 #+begin_src haskell
 SrcSpan -> Name
 #+end_src


* Future
- Fixity info
- ~GHC_CPP~
- Free vars?
- Easy Export of Name table for lookup?
- ghc-exactprint API
  - currently provisional
  - should it be split?
    - parsing
    - printing
    - low-level API
    rest outside
  - where should it live?
- Link-up with ghc-lib-parser

* End
